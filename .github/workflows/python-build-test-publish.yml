# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: digirock actions

on: [push, pull_request]

env:
  PACKAGE: digirock

jobs:
  build-test:
    name: Build and test
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python: ["3.9"]

    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
      coverage_color: ${{ steps.coverage.outputs.color }}

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          # required for `git describe --tags` to work
          fetch-depth: 0

      # required to use caching because it depends on requirements.txt
      - name: create requirements
        run: |
          python -m pip install --upgrade pip
          pip install pip_tools
          pip-compile setup.cfg --extra test

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      - name: Install package and deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .

      - name: Run tests
        # additional configuration in pyproject.toml
        run: |
          pytest -v | tee ./pytest-coverage.txt

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
          title: Coverage Report ${{ matrix.os }} Python ${{ matrix.python }}

      - name: Pytest coverage output
        id: coverage
        if: ${{ matrix.os }} == 'ubuntu-latest' && ${{ matrix.python }} == '3.9'
        run: |
          echo "::set-output name=coverage::${{ steps.coverageComment.outputs.coverage }}"
          echo "::set-output name=color::${{ steps.coverageComment.outputs.color }}"

      - name: Build wheels
        run: pip wheel . -w dist --no-deps

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }} Python ${{ matrix.python }} wheel
          path: dist/*

  test_badge:
    name: create test badges
    if: always() && github.ref_name == 'main'
    needs: [build-test]
    runs-on: ubuntu-latest

    steps:
      - name: passed?
        if: needs.build-test.result == 'success'
        run: |
          echo "BADGE_COLOUR=green" >> $GITHUB_ENV
          echo "BADGE_MSG=pass" >> $GITHUB_ENV

      - name: failed?
        if: needs.build-test.result == 'failure'
        run: |
          echo "BADGE_COLOUR=RED" >> $GITHUB_ENV
          echo "BADGE_MSG=fail" >> $GITHUB_ENV

      - name: create test badges
        if:
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 0da415ee1bf30b0fc37a2fc4ddafbdee
          filename: ${{ env.PACKAGE }}_test.json
          label: Tests
          namedLogo: Python
          logoColor: white
          message: ${{ env.BADGE_MSG }}
          color: ${{ env.BADGE_COLOUR }}

      - name: Create the coverage badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 0da415ee1bf30b0fc37a2fc4ddafbdee
          filename: ${{ env.PACKAGE }}_coverage.json
          label: Coverage
          message: ${{ needs.build-test.outputs.coverage }}
          color: ${{ needs.build-test.outputs.coverage_color }}
          namedLogo: python

  publish:
    name: Publish to test.PyPI and PyPI
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref_name == 'main' || startsWith(github.ref, 'refs/tags')

    steps:
      - name: Get wheels
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Move to dist/
        run: |
          mkdir dist
          find artifacts -name "*.whl" -exec mv '{}' dist/ \;

      - name: Publish package to test.PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
        # If this is a tagged release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
